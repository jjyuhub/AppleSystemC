name: Install SystemC on macOS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install cmake
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Verify architecture
        run: |
          if [[ "$(uname -m)" != "arm64" ]]; then
            echo "Error: Not running on Apple Silicon (ARM64)." >&2
            exit 1
          fi
          echo "Running on Apple Silicon (ARM64)."

      - name: Download and extract SystemC
        run: |
          curl -LO https://github.com/accellera-official/systemc/archive/refs/tags/2.3.4.tar.gz
          tar -xzf 2.3.4.tar.gz
          mv systemc-2.3.4 systemc-2.3.4-source

      - name: Build and install SystemC
        run: |
          mkdir -p systemc-2.3.4-source/BUILD systemc-2.3.4-source/INSTALL
          cd systemc-2.3.4-source/BUILD
          cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_INSTALL_PREFIX="../INSTALL" ..
          make -j$(sysctl -n hw.ncpu)
          make install
          cd ../..

      - name: Verify installation
        run: |
          realpath systemc-2.3.4-source/INSTALL

      - name: Run SystemC advanced tests
        run: |
          echo '#include <systemc.h>' > test.cpp
          echo 'SC_MODULE(Producer) {' >> test.cpp
          echo '  sc_out<int> out;' >> test.cpp
          echo '  void generate() {' >> test.cpp
          echo '    for (int i = 0; i < 5; ++i) {' >> test.cpp
          echo '      out.write(i);' >> test.cpp
          echo '      wait(10, SC_NS);' >> test.cpp
          echo '    }' >> test.cpp
          echo '  }' >> test.cpp
          echo '  SC_CTOR(Producer) { SC_THREAD(generate); }' >> test.cpp
          echo '};' >> test.cpp

          echo 'SC_MODULE(Consumer) {' >> test.cpp
          echo '  sc_in<int> in;' >> test.cpp
          echo '  void consume() {' >> test.cpp
          echo '    while (true) {' >> test.cpp
          echo '      cout << "Received: " << in.read() << " at " << sc_time_stamp() << endl;' >> test.cpp
          echo '      next_trigger(in.value_changed_event());' >> test.cpp
          echo '    }' >> test.cpp
          echo '  }' >> test.cpp
          echo '  SC_CTOR(Consumer) { SC_METHOD(consume); sensitive << in; dont_initialize(); }' >> test.cpp
          echo '};' >> test.cpp

          echo 'int sc_main(int argc, char* argv[]) {' >> test.cpp
          echo '  sc_signal<int> sig;' >> test.cpp
          echo '  Producer prod("Producer");' >> test.cpp
          echo '  Consumer cons("Consumer");' >> test.cpp
          echo '  prod.out(sig);' >> test.cpp
          echo '  cons.in(sig);' >> test.cpp
          echo '  sc_start(50, SC_NS);' >> test.cpp
          echo '  return 0;' >> test.cpp
          echo '}' >> test.cpp

          g++ -std=c++17 -I systemc-2.3.4-source/INSTALL/include -L systemc-2.3.4-source/INSTALL/lib -lsystemc test.cpp -o test
          ./test
